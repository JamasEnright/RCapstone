eq_map<-function(x,annot_col){
leaflet() %>%
addTiles() %>%
addMarkers(data = x, lng = ~ LONGITUDE, lat = ~ LATITUDE, popup = ~ annot_col)
}
eq_clean_data<-function(x){
x$DATE=lubridate::ymd(paste("0000",x$MONTH,x$DAY,sep="-"),truncated=2)+lubridate::years(x$YEAR)
x$LATITUDE=as.numeric(x$LATITUDE)
x$LONGITUDE=as.numeric(x$LONGITUDE)
x
}
eq_location_clean<-function(x){
x$LOCATION_NAME=gsub("^[^:]+:\\s*", "", x$LOCATION_NAME)
x[x$LOCATION_NAME=="",]$LOCATION_NAME=x[x$LOCATION_NAME=="",]$COUNTRY
x
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
library(dplyr)
library(magrittr)
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
setwd("F:/Downloads/Family Coding")
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
library(leaflet)
install.package("leaflet")
install.packages("leaflet")
library(leaflet)
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
raw_data<-read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE)
length(raw_data)
c("",rep=length(x))
c("",rep=length(raw_data))
x=raw_data
rep("",length(x))
eq_create_label<-function(x){
y=rep("",length(x))
y[!is.na(x$LOCATION)]=paste(y,"<b>Location: </b>",x[!is.na(x$LOCATION),]$LOCATION,"<br />")
y[!is.na(x$EQ_PRIMARY)]=paste(y,"<b>Magnitude: </b>",x[!is.na(x$EQ_PRIMARY),]$EQ_PRIMARY,"<br />")
y[!is.na(x$TOTAL_DEATHS)]=paste(y,"<b>Total deaths: </b>",x[!is.na(x$TOTAL_DEATHS),]$TOTAL_DEATHS)
y
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
y=rep("",length(x))
y[!is.na(x$LOCATION)]=paste(y,"<b>Location: </b>",x[!is.na(x$LOCATION),]$LOCATION,"<br />")
y
y[!is.na(x$EQ_PRIMARY)]=paste(y,"<b>Magnitude: </b>",x[!is.na(x$EQ_PRIMARY),]$EQ_PRIMARY,"<br />")
y=rep("",length(x))
dim(x)
y=rep("",dim(x)[1])
y[!is.na(x$LOCATION)]=paste0(y,"<b>Location: </b>",x[!is.na(x$LOCATION),]$LOCATION,"<br />")
y[!is.na(x$EQ_PRIMARY)]=paste0(y,"<b>Magnitude: </b>",x[!is.na(x$EQ_PRIMARY),]$EQ_PRIMARY,"<br />")
y=rep("",dim(x)[1])
y[!is.na(x$EQ_PRIMARY)]=paste0(y,"<b>Magnitude: </b>",x[!is.na(x$EQ_PRIMARY),]$EQ_PRIMARY,"<br />")
y=rep("",dim(x)[1])
y[!is.na(x$TOTAL_DEATHS)]=paste0(y,"<b>Total deaths: </b>",x[!is.na(x$TOTAL_DEATHS),]$TOTAL_DEATHS)
eq_create_label<-function(x){
x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION),
paste0(y,"<b>Location: </b>",LOCATION,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
x$y
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label<-function(x){
x<-x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION),
paste0(y,"<b>Location: </b>",LOCATION,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
x$y
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label<-function(x){
x<-x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION_NAME),
paste0(y,"<b>Location: </b>",LOCATION_NAME,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
x$y
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION_NAME),
paste0(y,"<b>Location: </b>",LOCATION_NAME,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
eq_create_label<-function(x){
x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION_NAME),
paste0(y,"<b>Location: </b>",LOCATION_NAME,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label<-function(x){
x<-x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION_NAME),
paste0(y,"<b>Location: </b>",LOCATION_NAME,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
x$y
}
x<-x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION_NAME),
paste0(y,"<b>Location: </b>",LOCATION_NAME,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
x$y
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map<-function(x,annot_col){
leaflet() %>%
addTiles() %>%
addMarkers(data = x, lng = ~ LONGITUDE, lat = ~ LATITUDE, popup = ~ x[annot_col])
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map<-function(x,annot_col){
leaflet() %>%
addTiles() %>%
addMarkers(data = x, lng = ~ LONGITUDE, lat = ~ LATITUDE, popup = ~ x[annot_col,])
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map<-function(x,annot_col){
leaflet() %>%
addTiles() %>%
addMarkers(data = x, lng = ~ LONGITUDE, lat = ~ LATITUDE, popup = ~ x[[annot_col]])
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label<-function(x){
x<-eq_location_clean(x)
x<-x %>%
mutate(y="",
y=ifelse(!is.na(LOCATION_NAME),
paste0(y,"<b>Location: </b>",LOCATION_NAME,"<br />"),
y),
y=ifelse(!is.na(EQ_PRIMARY),
paste0(y,"<b>Magnitude: </b>",EQ_PRIMARY,"<br />"),
y),
y=ifelse(!is.na(TOTAL_DEATHS),
paste0(y,"<b>Total Deaths: </b>",TOTAL_DEATHS,"<br />"),
y)
)
x$y
}
read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE) %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
GeomTIMELINELABEL <- ggplot2::ggproto("GeomTIMELINELABEL", Geom,
required_aes = c("x"),
default_aes = aes(size=1,y=0.5,group=NULL,n_max=5,label=NULL),
draw_key = draw_key_text,
draw_panel= function(data, panel_scales, coord) {
#sort out the data
data <- data %>%
dplyr::group_by_("group") %>%
dplyr::top_n(data$n_max[1], size) %>%
dplyr::ungroup()
#Set y from group
if(!is.null(data[1,]$group)){
numg=length(unique(data$group))
data$y=(as.numeric(as.factor(data$group))/(numg+1))
}
## Transform the data first
coords <- coord$transform(data, panel_scales)
#create the chart
textg<-grid::textGrob(label = coords$label, x = coords$x, y = coords$y+0.06,
just = c("left", "bottom"),rot=45)
lineg<-grid::segmentsGrob(x0 = unit(coords$x, "npc"),x1 = unit(coords$x, "npc"),
y0 = unit(coords$y, "npc"),y1 = unit(coords$y+0.05, "npc"))
grid::gTree(children = grid::gList(lineg,textg))
})
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTIMELINELABEL, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
require(dplyr)
require(lubridate)
require(grid)
require(ggplot2)
library(magrittr)
GeomTIMELINELABEL <- ggplot2::ggproto("GeomTIMELINELABEL", Geom,
required_aes = c("x"),
default_aes = aes(size=1,y=0.5,group=NULL,n_max=5,label=NULL),
draw_key = draw_key_text,
draw_panel= function(data, panel_scales, coord) {
#sort out the data
data <- data %>%
dplyr::group_by_("group") %>%
dplyr::top_n(data$n_max[1], size) %>%
dplyr::ungroup()
#Set y from group
if(!is.null(data[1,]$group)){
numg=length(unique(data$group))
data$y=(as.numeric(as.factor(data$group))/(numg+1))
}
## Transform the data first
coords <- coord$transform(data, panel_scales)
#create the chart
textg<-grid::textGrob(label = coords$label, x = coords$x, y = coords$y+0.06,
just = c("left", "bottom"),rot=45)
lineg<-grid::segmentsGrob(x0 = unit(coords$x, "npc"),x1 = unit(coords$x, "npc"),
y0 = unit(coords$y, "npc"),y1 = unit(coords$y+0.05, "npc"))
grid::gTree(children = grid::gList(lineg,textg))
})
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTIMELINELABEL, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
eq_clean_data<-function(x){
x$DATE=lubridate::ymd(paste("0000",x$MONTH,x$DAY,sep="-"),truncated=2)+lubridate::years(x$YEAR)
x$LATITUDE=as.numeric(x$LATITUDE)
x$LONGITUDE=as.numeric(x$LONGITUDE)
x
}
eq_location_clean<-function(x){
x$LOCATION_NAME=gsub("^[^:]+:\\s*", "", x$LOCATION_NAME)
x[x$LOCATION_NAME=="",]$LOCATION_NAME=x[x$LOCATION_NAME=="",]$COUNTRY
x
}
GeomTIMELINE <- ggplot2::ggproto("GeomTIMELINE", Geom,
required_aes = c("x"),
default_aes = aes(colour="black", size=1, alpha=1,y=0.5,stroke = 0.5,fill="blue",shape=21,group=NULL),
draw_key = draw_key_point,
draw_panel= function(data, panel_scales, coord) {
#sort out the data
xmin=min(data$x)
xmax=max(data$x)
#Set y from group
if(!is.null(data[1,]$group)){
numg=length(unique(data$group))
data$y=as.numeric(as.factor(data$group))/(numg+1)
}
## Transform the data first
coords <- coord$transform(data, panel_scales)
# label line
labdat<-data.frame(label=unique(as.character(data$group)),y=unique(coords$y)+0.03,stringsAsFactors = FALSE)
#create the chart
labg<-grid::textGrob(label = labdat$label, x = (min(coords$x))-0.01, y = labdat$y)
lg<-grid::segmentsGrob(x0 = unit(xmin, "npc"),x1 = unit(xmax, "npc"),
y0 = unit(coords$y, "npc"),y1 = unit(coords$y, "npc"))
pg<-grid::pointsGrob(x = coords$x,y=coords$y,pch = coords$shape,size=grid::unit(coords$size,"mm"),gp=grid::gpar(col=coords$colour,fill=coords$fill,alpha = coords$alpha,fontsize=coords$size * .pt + coords$stroke * .stroke / 2))
grid::gTree(children = grid::gList(lg,pg,grid::xaxisGrob(),labg))
})
geom_timeline <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTIMELINE, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
raw_data<-read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE)
raw_data<-read.delim("signif.txt", sep="\t", header=TRUE,stringsAsFactors = FALSE)
uc<-subset(raw_data,COUNTRY %in% c("USA","CHINA"))
uc %>%
eq_clean_data() %>%
dplyr::filter(!is.na(EQ_PRIMARY), !is.na(DEATHS)) %>%
ggplot() +
aes(
x = DATE,
size = EQ_PRIMARY,
colour = DEATHS,
group=COUNTRY,
label=LOCATION_NAME
) +
geom_timeline() +
geom_timeline_label()
GeomTIMELINELABEL <- ggplot2::ggproto("GeomTIMELINELABEL", Geom,
required_aes = c("x"),
default_aes = aes(size=1,y=0.5,group=NULL,n_max=5,label=NULL),
draw_key = draw_key_blank,
draw_panel= function(data, panel_scales, coord) {
#sort out the data
data <- data %>%
dplyr::group_by_("group") %>%
dplyr::top_n(data$n_max[1], size) %>%
dplyr::ungroup()
#Set y from group
if(!is.null(data[1,]$group)){
numg=length(unique(data$group))
data$y=(as.numeric(as.factor(data$group))/(numg+1))
}
## Transform the data first
coords <- coord$transform(data, panel_scales)
#create the chart
textg<-grid::textGrob(label = coords$label, x = coords$x, y = coords$y+0.06,
just = c("left", "bottom"),rot=45)
lineg<-grid::segmentsGrob(x0 = unit(coords$x, "npc"),x1 = unit(coords$x, "npc"),
y0 = unit(coords$y, "npc"),y1 = unit(coords$y+0.05, "npc"))
grid::gTree(children = grid::gList(lineg,textg))
})
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTIMELINELABEL, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
uc %>%
eq_clean_data() %>%
eq_location_clean() %>%
dplyr::filter(!is.na(EQ_PRIMARY), !is.na(DEATHS)) %>%
ggplot() +
aes(
x = DATE,
size = EQ_PRIMARY,
colour = DEATHS,
group=COUNTRY,
label=LOCATION_NAME
) +
geom_timeline() +
geom_timeline_label()
?leaflet
??leaflet
??addTiles
use_vignette("Earthquake_visualisation")
library(devtools)
use_vignette("Earthquake_visualisation")
devtools::load_all(".")
library(ggplot2)
devtools::load_all(".")
library(ggplot2)
devtools::load_all(".")
devtools::load_all(".")
??required_aes
??aes
??draw_key_blank
??Geom
library(dplyr)
library(dplyr)
raw_data<-system.file("extdata", "signif.txt", package = "RCapstone")
clean_data<-eq_clean_data(raw_data)
clean_data<-eq_clean_data(raw_data)
str(raw_data)
??read_tsv
library(readr)
read_tsv()
raw_data<-readr::read_tsv(system.file("extdata", "signif.txt", package = "RCapstone"))
clean_data<-eq_clean_data(raw_data)
clean_data<-eq_location_clean(clean_data)
clean_data<-eq_clean_data(raw_data)
clean_data<-eq_location_clean(clean_data)
??unit
??.pt
library(RCapstone)
library(RCapstone)
library(devtools)
use_travis()
